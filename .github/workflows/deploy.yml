# .github/workflows/deploy-simple.yml
name: Simple Oracle Cloud Deploy (Free Tier)

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup OCI CLI
        run: |
          # Install OCI CLI non-interactively
          bash -c "$(curl -L https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh)" -- --accept-all-defaults
          echo "$HOME/bin" >> $GITHUB_PATH
      
      - name: Configure OCI CLI
        run: |
          # Create OCI config directory
          mkdir -p ~/.oci
          
          # Create OCI config file
          cat > ~/.oci/config << EOF
          [DEFAULT]
          user=${{ secrets.OCI_USER_ID }}
          fingerprint=${{ secrets.OCI_FINGERPRINT }}
          tenancy=${{ secrets.OCI_TENANCY_ID }}
          region=${{ secrets.OCI_REGION }}
          key_file=~/.oci/oci_api_key.pem
          EOF
          
          # Create private key file
          echo "${{ secrets.OCI_PRIVATE_KEY }}" > ~/.oci/oci_api_key.pem
          chmod 600 ~/.oci/oci_api_key.pem
          
          # Test OCI CLI
          oci iam region list --output table
      
      - name: Create Cloud-Init Script
        run: |
          # Create startup script for VM
          cat > cloud-init.yaml << 'EOF'
          #cloud-config
          package_update: true
          packages:
            - docker.io
            - git
            - python3
            - python3-pip
            - build-essential
            - libleveldb-dev
          
          runcmd:
            - systemctl start docker
            - systemctl enable docker
            - usermod -aG docker ubuntu
            - git clone https://github.com/Emekaiwuagwu/dinari-blockchain.git /opt/dinari-blockchain
            - cd /opt/dinari-blockchain
            - pip3 install -r requirements.txt
            - mkdir -p /opt/dinari-blockchain/blockchain_data
            - nohup python3 app.py > /var/log/dinari-blockchain.log 2>&1 &
            - echo "DinariBlockchain started" >> /var/log/cloud-init-output.log
          
          write_files:
            - path: /etc/systemd/system/dinari-blockchain.service
              content: |
                [Unit]
                Description=Dinari Blockchain Service
                After=network.target
                
                [Service]
                Type=simple
                User=ubuntu
                WorkingDirectory=/opt/dinari-blockchain
                ExecStart=/usr/bin/python3 app.py
                Restart=always
                Environment=LEVELDB_PATH=/opt/dinari-blockchain/blockchain_data
                Environment=FLASK_ENV=production
                Environment=BLOCKCHAIN_NETWORK=mainnet
                Environment=P2P_PORT=8333
                Environment=API_PORT=5000
                Environment=ENABLE_MINING=true
                
                [Install]
                WantedBy=multi-user.target
              permissions: '0644'
          
          final_message: "DinariBlockchain deployment completed!"
          EOF
      
      - name: Deploy VM Instance
        run: |
          # Get first availability domain
          AD=$(oci iam availability-domain list --compartment-id ${{ secrets.OCI_TENANCY_ID }} --query 'data[0].name' --raw-output)
          echo "Using Availability Domain: $AD"
          
          # Get Oracle Linux image (free tier compatible)
          IMAGE_ID=$(oci compute image list --compartment-id ${{ secrets.OCI_TENANCY_ID }} --operating-system "Oracle Linux" --operating-system-version "8" --shape "VM.Standard.E2.1.Micro" --query 'data[0].id' --raw-output)
          echo "Using Image: $IMAGE_ID"
          
          # Create VM instance
          INSTANCE_ID=$(oci compute instance launch \
            --compartment-id ${{ secrets.OCI_TENANCY_ID }} \
            --availability-domain "$AD" \
            --shape "VM.Standard.E2.1.Micro" \
            --image-id "$IMAGE_ID" \
            --display-name "dinari-blockchain-$(date +%s)" \
            --user-data-file cloud-init.yaml \
            --wait-for-state RUNNING \
            --max-wait-seconds 300 \
            --query 'data.id' \
            --raw-output)
          
          echo "Instance ID: $INSTANCE_ID"
          
          # Get public IP
          sleep 60  # Wait for networking to initialize
          PUBLIC_IP=$(oci compute instance list-vnics --instance-id "$INSTANCE_ID" --query 'data[0]."public-ip"' --raw-output)
          
          echo "üöÄ DinariBlockchain deployed successfully!"
          echo "üìç Public IP: $PUBLIC_IP"
          echo "üåê Access your blockchain at: http://$PUBLIC_IP:5000"
          echo "üîç Health check: http://$PUBLIC_IP:5000/health"
          
          # Save IP for future reference
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
      
      - name: Test Deployment
        run: |
          echo "Waiting for blockchain to start..."
          sleep 120  # Give the service time to start
          
          if [ ! -z "$PUBLIC_IP" ]; then
            echo "Testing blockchain endpoints..."
            
            # Test health endpoint
            if curl -f "http://$PUBLIC_IP:5000/health" 2>/dev/null; then
              echo "‚úÖ Blockchain is healthy and running!"
            else
              echo "‚è≥ Blockchain is still starting up. Check in a few minutes."
            fi
            
            echo "üìã Useful commands:"
            echo "  Health: curl http://$PUBLIC_IP:5000/health"
            echo "  Status: curl http://$PUBLIC_IP:5000/api/status" 
            echo "  Logs: ssh -i your-key ubuntu@$PUBLIC_IP 'tail -f /var/log/dinari-blockchain.log'"
          fi