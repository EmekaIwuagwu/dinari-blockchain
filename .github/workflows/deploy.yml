# .github/workflows/deploy-simple.yml
name: Simple Oracle Cloud Deploy (Free Tier)

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup OCI CLI
        run: |
          # Install OCI CLI non-interactively
          bash -c "$(curl -L https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh)" -- --accept-all-defaults
          echo "$HOME/bin" >> $GITHUB_PATH
      
      - name: Configure OCI CLI
        run: |
          # Create OCI config directory
          mkdir -p ~/.oci
          
          # Create OCI config file
          cat > ~/.oci/config << EOF
          [DEFAULT]
          user=${{ secrets.OCI_USER_ID }}
          fingerprint=${{ secrets.OCI_FINGERPRINT }}
          tenancy=${{ secrets.OCI_TENANCY_ID }}
          region=${{ secrets.OCI_REGION }}
          key_file=~/.oci/oci_api_key.pem
          EOF
          
          # Create private key file with proper ending
          echo "${{ secrets.OCI_PRIVATE_KEY }}" > ~/.oci/oci_api_key.pem
          echo "OCI_API_KEY" >> ~/.oci/oci_api_key.pem
          chmod 600 ~/.oci/oci_api_key.pem
          chmod 600 ~/.oci/config
          
          # Set environment variables to suppress warnings
          echo "OCI_CLI_SUPPRESS_FILE_PERMISSIONS_WARNING=True" >> $GITHUB_ENV
          echo "SUPPRESS_LABEL_WARNING=True" >> $GITHUB_ENV
          
          # Test OCI CLI
          oci iam region list --output table
      
      - name: Create Cloud-Init Script
        run: |
          # Create startup script for VM
          cat > cloud-init.yaml << 'EOF'
          #cloud-config
          package_update: true
          packages:
            - docker.io
            - git
            - python3
            - python3-pip
            - build-essential
            - libleveldb-dev
          
          runcmd:
            - systemctl start docker
            - systemctl enable docker
            - usermod -aG docker ubuntu
            - git clone https://github.com/Emekaiwuagwu/dinari-blockchain.git /opt/dinari-blockchain
            - cd /opt/dinari-blockchain
            - pip3 install -r requirements.txt
            - mkdir -p /opt/dinari-blockchain/blockchain_data
            - nohup python3 app.py > /var/log/dinari-blockchain.log 2>&1 &
            - echo "DinariBlockchain started" >> /var/log/cloud-init-output.log
          
          write_files:
            - path: /etc/systemd/system/dinari-blockchain.service
              content: |
                [Unit]
                Description=Dinari Blockchain Service
                After=network.target
                
                [Service]
                Type=simple
                User=ubuntu
                WorkingDirectory=/opt/dinari-blockchain
                ExecStart=/usr/bin/python3 app.py
                Restart=always
                Environment=LEVELDB_PATH=/opt/dinari-blockchain/blockchain_data
                Environment=FLASK_ENV=production
                Environment=BLOCKCHAIN_NETWORK=mainnet
                Environment=P2P_PORT=8333
                Environment=API_PORT=5000
                Environment=ENABLE_MINING=true
                
                [Install]
                WantedBy=multi-user.target
              permissions: '0644'
          
          final_message: "DinariBlockchain deployment completed!"
          EOF
      
      - name: Deploy VM Instance
        run: |
          # Get first availability domain
          AD=$(oci iam availability-domain list --compartment-id ${{ secrets.OCI_TENANCY_ID }} --query 'data[0].name' --raw-output)
          echo "Using Availability Domain: $AD"
          
          # Get Oracle Linux image (free tier compatible)
          IMAGE_ID=$(oci compute image list --compartment-id ${{ secrets.OCI_TENANCY_ID }} --operating-system "Oracle Linux" --operating-system-version "8" --shape "VM.Standard.E2.1.Micro" --query 'data[0].id' --raw-output)
          echo "Using Image: $IMAGE_ID"
          
          # Get or create VCN and subnet
          VCN_ID=$(oci network vcn list --compartment-id ${{ secrets.OCI_TENANCY_ID }} --query 'data[0].id' --raw-output 2>/dev/null || echo "")
          
          if [ -z "$VCN_ID" ] || [ "$VCN_ID" = "null" ]; then
            echo "Creating VCN..."
            VCN_ID=$(oci network vcn create \
              --compartment-id ${{ secrets.OCI_TENANCY_ID }} \
              --cidr-block "10.0.0.0/16" \
              --display-name "dinari-blockchain-vcn" \
              --wait-for-state AVAILABLE \
              --query 'data.id' \
              --raw-output)
            echo "Created VCN: $VCN_ID"
            
            # Create Internet Gateway
            IGW_ID=$(oci network internet-gateway create \
              --compartment-id ${{ secrets.OCI_TENANCY_ID }} \
              --vcn-id "$VCN_ID" \
              --display-name "dinari-blockchain-igw" \
              --is-enabled true \
              --wait-for-state AVAILABLE \
              --query 'data.id' \
              --raw-output)
            echo "Created Internet Gateway: $IGW_ID"
            
            # Get default route table
            RT_ID=$(oci network route-table list \
              --compartment-id ${{ secrets.OCI_TENANCY_ID }} \
              --vcn-id "$VCN_ID" \
              --query 'data[0].id' \
              --raw-output)
            
            # Add route to internet gateway
            oci network route-table update \
              --rt-id "$RT_ID" \
              --route-rules '[{
                "destination": "0.0.0.0/0",
                "destinationType": "CIDR_BLOCK",
                "networkEntityId": "'$IGW_ID'"
              }]' \
              --force
            
            # Create Security List
            SL_ID=$(oci network security-list create \
              --compartment-id ${{ secrets.OCI_TENANCY_ID }} \
              --vcn-id "$VCN_ID" \
              --display-name "dinari-blockchain-seclist" \
              --egress-security-rules '[{
                "destination": "0.0.0.0/0",
                "protocol": "all"
              }]' \
              --ingress-security-rules '[{
                "source": "0.0.0.0/0",
                "protocol": "6",
                "tcpOptions": {
                  "destinationPortRange": {
                    "min": 22,
                    "max": 22
                  }
                }
              }, {
                "source": "0.0.0.0/0",
                "protocol": "6",
                "tcpOptions": {
                  "destinationPortRange": {
                    "min": 5000,
                    "max": 5000
                  }
                }
              }, {
                "source": "0.0.0.0/0",
                "protocol": "6",
                "tcpOptions": {
                  "destinationPortRange": {
                    "min": 8333,
                    "max": 8333
                  }
                }
              }]' \
              --wait-for-state AVAILABLE \
              --query 'data.id' \
              --raw-output)
            echo "Created Security List: $SL_ID"
            
            # Create Subnet
            SUBNET_ID=$(oci network subnet create \
              --compartment-id ${{ secrets.OCI_TENANCY_ID }} \
              --vcn-id "$VCN_ID" \
              --cidr-block "10.0.1.0/24" \
              --display-name "dinari-blockchain-subnet" \
              --route-table-id "$RT_ID" \
              --security-list-ids '["'$SL_ID'"]' \
              --wait-for-state AVAILABLE \
              --query 'data.id' \
              --raw-output)
            echo "Created Subnet: $SUBNET_ID"
          else
            echo "Using existing VCN: $VCN_ID"
            # Get existing subnet
            SUBNET_ID=$(oci network subnet list --compartment-id ${{ secrets.OCI_TENANCY_ID }} --vcn-id "$VCN_ID" --query 'data[0].id' --raw-output)
            echo "Using existing Subnet: $SUBNET_ID"
          fi
          
          # Create VM instance
          echo "Creating VM instance..."
          INSTANCE_ID=$(oci compute instance launch \
            --compartment-id ${{ secrets.OCI_TENANCY_ID }} \
            --availability-domain "$AD" \
            --shape "VM.Standard.E2.1.Micro" \
            --image-id "$IMAGE_ID" \
            --subnet-id "$SUBNET_ID" \
            --display-name "dinari-blockchain-$(date +%s)" \
            --user-data-file cloud-init.yaml \
            --assign-public-ip true \
            --wait-for-state RUNNING \
            --max-wait-seconds 300 \
            --query 'data.id' \
            --raw-output)
          
          echo "Instance ID: $INSTANCE_ID"
          
          # Get public IP
          sleep 60  # Wait for networking to initialize
          PUBLIC_IP=$(oci compute instance list-vnics --instance-id "$INSTANCE_ID" --query 'data[0]."public-ip"' --raw-output)
          
          echo "🚀 DinariBlockchain deployed successfully!"
          echo "📍 Public IP: $PUBLIC_IP"
          echo "🌐 Access your blockchain at: http://$PUBLIC_IP:5000"
          echo "🔍 Health check: http://$PUBLIC_IP:5000/health"
          
          # Save IP for future reference
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
      
      - name: Test Deployment
        run: |
          echo "Waiting for blockchain to start..."
          sleep 120  # Give the service time to start
          
          if [ ! -z "$PUBLIC_IP" ]; then
            echo "Testing blockchain endpoints..."
            
            # Test health endpoint
            if curl -f "http://$PUBLIC_IP:5000/health" 2>/dev/null; then
              echo "✅ Blockchain is healthy and running!"
            else
              echo "⏳ Blockchain is still starting up. Check in a few minutes."
            fi
            
            echo "📋 Useful commands:"
            echo "  Health: curl http://$PUBLIC_IP:5000/health"
            echo "  Status: curl http://$PUBLIC_IP:5000/api/status" 
            echo "  Logs: ssh -i your-key ubuntu@$PUBLIC_IP 'tail -f /var/log/dinari-blockchain.log'"
          fi