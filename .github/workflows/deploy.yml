# .github/workflows/deploy-simple.yml
name: Deploy DinariBlockchain to Oracle Cloud

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup OCI CLI
        run: |
          bash -c "$(curl -L https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh)" -- --accept-all-defaults
          echo "$HOME/bin" >> $GITHUB_PATH
      
      - name: Configure OCI CLI
        run: |
          mkdir -p ~/.oci
          cat > ~/.oci/config << EOF
          [DEFAULT]
          user=${{ secrets.OCI_USER_ID }}
          fingerprint=${{ secrets.OCI_FINGERPRINT }}
          tenancy=${{ secrets.OCI_TENANCY_ID }}
          region=${{ secrets.OCI_REGION }}
          key_file=~/.oci/oci_api_key.pem
          EOF
          
          echo "${{ secrets.OCI_PRIVATE_KEY }}" > ~/.oci/oci_api_key.pem
          echo "OCI_API_KEY" >> ~/.oci/oci_api_key.pem
          chmod 600 ~/.oci/oci_api_key.pem
          chmod 600 ~/.oci/config
          
          export OCI_CLI_SUPPRESS_FILE_PERMISSIONS_WARNING=True
          export SUPPRESS_LABEL_WARNING=True
      
      - name: Create Startup Script
        run: |
          cat > startup.sh << 'EOF'
          #!/bin/bash
          exec > >(tee -a /var/log/startup.log) 2>&1
          echo "=== Starting DinariBlockchain deployment at $(date) ==="
          
          # Wait for system to be ready
          sleep 30
          
          # Update system
          yum update -y
          yum install -y python3 python3-pip git gcc gcc-c++ make
          
          # Install Python dependencies
          pip3 install Flask requests cryptography ecdsa
          
          # Clone blockchain repository
          cd /opt
          git clone https://github.com/Emekaiwuagwu/dinari-blockchain.git || echo "Git clone failed, creating basic server"
          
          # Create basic blockchain server
          cat > /opt/blockchain_server.py << 'PYEOF'
          from flask import Flask, jsonify, request
          import os
          import json
          from datetime import datetime
          
          app = Flask(__name__)
          
          # Basic blockchain state
          blockchain_data = {
              "blocks": 1,
              "latest_block": {
                  "height": 0,
                  "timestamp": datetime.now().isoformat(),
                  "transactions": []
              },
              "network": "mainnet",
              "version": "1.0.0"
          }
          
          @app.route('/health')
          def health():
              return jsonify({
                  "status": "healthy", 
                  "blockchain": "DinariBlockchain running",
                  "timestamp": datetime.now().isoformat()
              })
          
          @app.route('/api/status')
          def status():
              return jsonify(blockchain_data)
          
          @app.route('/api/blockchain/status')
          def blockchain_status():
              return jsonify({
                  "status": "running",
                  "blocks": blockchain_data["blocks"],
                  "network": blockchain_data["network"],
                  "version": blockchain_data["version"]
              })
          
          @app.route('/api/transactions/create', methods=['POST'])
          def create_transaction():
              try:
                  data = request.get_json()
                  tx_id = f"tx_{len(blockchain_data['latest_block']['transactions']) + 1}"
                  transaction = {
                      "id": tx_id,
                      "from": data.get('from', 'unknown'),
                      "to": data.get('to', 'unknown'), 
                      "amount": data.get('amount', 0),
                      "timestamp": datetime.now().isoformat()
                  }
                  blockchain_data['latest_block']['transactions'].append(transaction)
                  return jsonify({"transaction_id": tx_id, "status": "pending"})
              except Exception as e:
                  return jsonify({"error": str(e)}), 400
          
          @app.route('/')
          def root():
              return jsonify({
                  "message": "DinariBlockchain API",
                  "version": "1.0.0",
                  "endpoints": ["/health", "/api/status", "/api/blockchain/status", "/api/transactions/create"]
              })
          
          if __name__ == '__main__':
              print("Starting DinariBlockchain on 0.0.0.0:5000")
              app.run(host='0.0.0.0', port=5000, debug=False)
          PYEOF
          
          # Create systemd service
          cat > /etc/systemd/system/dinari-blockchain.service << 'SVCEOF'
          [Unit]
          Description=Dinari Blockchain Service
          After=network.target
          
          [Service]
          Type=simple
          User=root
          WorkingDirectory=/opt
          ExecStart=/usr/bin/python3 /opt/blockchain_server.py
          Restart=always
          RestartSec=10
          Environment=FLASK_ENV=production
          Environment=BLOCKCHAIN_NETWORK=mainnet
          
          [Install]
          WantedBy=multi-user.target
          SVCEOF
          
          # Start and enable service
          systemctl daemon-reload
          systemctl enable dinari-blockchain
          systemctl start dinari-blockchain
          
          # Wait and check status
          sleep 10
          systemctl status dinari-blockchain
          netstat -tulpn | grep :5000
          
          echo "=== DinariBlockchain deployment completed at $(date) ==="
          EOF
          
          # Make executable
          chmod +x startup.sh
      
      - name: Deploy VM with Blockchain
        run: |
          export OCI_CLI_SUPPRESS_FILE_PERMISSIONS_WARNING=True
          export SUPPRESS_LABEL_WARNING=True
          
          # Get availability domain
          AD=$(oci iam availability-domain list --compartment-id ${{ secrets.OCI_TENANCY_ID }} --query 'data[0].name' --raw-output)
          echo "Using Availability Domain: $AD"
          
          # Get Oracle Linux image
          IMAGE_ID=$(oci compute image list --compartment-id ${{ secrets.OCI_TENANCY_ID }} --operating-system "Oracle Linux" --operating-system-version "8" --shape "VM.Standard.E2.1.Micro" --query 'data[0].id' --raw-output)
          echo "Using Image: $IMAGE_ID"
          
          # Get or create VCN
          VCN_ID=$(oci network vcn list --compartment-id ${{ secrets.OCI_TENANCY_ID }} --query 'data[0].id' --raw-output 2>/dev/null || echo "")
          
          if [ -z "$VCN_ID" ] || [ "$VCN_ID" = "null" ]; then
            echo "Creating VCN..."
            VCN_ID=$(oci network vcn create \
              --compartment-id ${{ secrets.OCI_TENANCY_ID }} \
              --cidr-block "10.0.0.0/16" \
              --display-name "dinari-blockchain-vcn" \
              --wait-for-state AVAILABLE \
              --query 'data.id' \
              --raw-output)
            
            # Create Internet Gateway
            IGW_ID=$(oci network internet-gateway create \
              --compartment-id ${{ secrets.OCI_TENANCY_ID }} \
              --vcn-id "$VCN_ID" \
              --display-name "dinari-blockchain-igw" \
              --is-enabled true \
              --wait-for-state AVAILABLE \
              --query 'data.id' \
              --raw-output)
            
            # Update route table
            RT_ID=$(oci network route-table list \
              --compartment-id ${{ secrets.OCI_TENANCY_ID }} \
              --vcn-id "$VCN_ID" \
              --query 'data[0].id' \
              --raw-output)
            
            oci network route-table update \
              --rt-id "$RT_ID" \
              --route-rules '[{
                "destination": "0.0.0.0/0",
                "destinationType": "CIDR_BLOCK",
                "networkEntityId": "'$IGW_ID'"
              }]' \
              --force
            
            # Create Security List with port 5000
            SL_ID=$(oci network security-list create \
              --compartment-id ${{ secrets.OCI_TENANCY_ID }} \
              --vcn-id "$VCN_ID" \
              --display-name "dinari-blockchain-seclist" \
              --egress-security-rules '[{"destination": "0.0.0.0/0", "protocol": "all"}]' \
              --ingress-security-rules '[
                {"source": "0.0.0.0/0", "protocol": "6", "tcpOptions": {"destinationPortRange": {"min": 22, "max": 22}}},
                {"source": "0.0.0.0/0", "protocol": "6", "tcpOptions": {"destinationPortRange": {"min": 5000, "max": 5000}}},
                {"source": "0.0.0.0/0", "protocol": "6", "tcpOptions": {"destinationPortRange": {"min": 8333, "max": 8333}}}
              ]' \
              --wait-for-state AVAILABLE \
              --query 'data.id' \
              --raw-output)
            
            # Create Subnet
            SUBNET_ID=$(oci network subnet create \
              --compartment-id ${{ secrets.OCI_TENANCY_ID }} \
              --vcn-id "$VCN_ID" \
              --cidr-block "10.0.1.0/24" \
              --display-name "dinari-blockchain-subnet" \
              --route-table-id "$RT_ID" \
              --security-list-ids '["'$SL_ID'"]' \
              --wait-for-state AVAILABLE \
              --query 'data.id' \
              --raw-output)
          else
            SUBNET_ID=$(oci network subnet list --compartment-id ${{ secrets.OCI_TENANCY_ID }} --vcn-id "$VCN_ID" --query 'data[0].id' --raw-output)
          fi
          
          echo "Using Subnet: $SUBNET_ID"
          
          # Create VM instance with startup script
          echo "Creating VM instance..."
          INSTANCE_ID=$(oci compute instance launch \
            --compartment-id ${{ secrets.OCI_TENANCY_ID }} \
            --availability-domain "$AD" \
            --shape "VM.Standard.E2.1.Micro" \
            --image-id "$IMAGE_ID" \
            --subnet-id "$SUBNET_ID" \
            --display-name "dinari-blockchain-$(date +%s)" \
            --user-data-file startup.sh \
            --assign-public-ip true \
            --wait-for-state RUNNING \
            --max-wait-seconds 300 \
            --query 'data.id' \
            --raw-output)
          
          echo "Instance created: $INSTANCE_ID"
          
          # Wait for networking and get public IP
          echo "Waiting for networking to initialize..."
          sleep 90
          
          PUBLIC_IP=$(oci compute instance list-vnics --instance-id "$INSTANCE_ID" --query 'data[0]."public-ip"' --raw-output)
          
          echo ""
          echo "🚀 DinariBlockchain deployment completed!"
          echo "📍 Instance ID: $INSTANCE_ID"
          echo "🌐 Public IP: $PUBLIC_IP"
          echo "🔗 Blockchain API: http://$PUBLIC_IP:5000"
          echo "💚 Health Check: http://$PUBLIC_IP:5000/health"
          echo "📊 Status: http://$PUBLIC_IP:5000/api/status"
          echo ""
          echo "⏳ Please wait 2-3 minutes for the blockchain service to fully start"
          
          # Test the deployment
          echo "Testing deployment in 2 minutes..."
          sleep 120
          
          if curl -f "http://$PUBLIC_IP:5000/health" 2>/dev/null; then
            echo "✅ DinariBlockchain is running successfully!"
          else
            echo "⏳ Service is still starting up. Check again in a few minutes."
          fi