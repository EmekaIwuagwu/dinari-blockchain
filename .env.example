# DinariBlockchain - Environment Variables
# .env.example - Template for environment configuration
# Copy this file to .env and update values for your deployment

# ================================
# BASIC NODE CONFIGURATION
# ================================
NODE_ID=node1
NODE_TYPE=validator
NODE_ENV=development

# Network Configuration  
P2P_PORT=8333
API_PORT=5000
HOST=0.0.0.0

# Genesis Configuration
GENESIS_FILE=genesis.json
DATA_DIR=data
WALLET_DIR=wallets
LOG_DIR=logs

# ================================
# DATABASE CONFIGURATION
# ================================

# PostgreSQL (Recommended for production)
DATABASE_URL=postgresql://Dinari:your_secure_password@localhost:5432/Dinari_blockchain
DB_HOST=localhost
DB_PORT=5432
DB_NAME=Dinari_blockchain
DB_USER=Dinari
DB_PASSWORD=your_secure_password
DB_SSL=false

# Redis Cache
REDIS_URL=redis://localhost:6379/0
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_DB=0
REDIS_PASSWORD=

# ================================
# BLOCKCHAIN SETTINGS
# ================================

# Consensus
BLOCK_TIME=30
MIN_VALIDATORS=3
MAX_VALIDATORS=21

# Transaction Fees
MIN_FEE=0.001
MAX_TX_PER_BLOCK=100
GAS_LIMIT=10000000

# Network Discovery
MAX_PEERS=50
BOOTSTRAP_NODES=127.0.0.1:8333,127.0.0.1:8433,127.0.0.1:8533
PEER_DISCOVERY_INTERVAL=30

# ================================
# SMART CONTRACTS
# ================================
CONTRACTS_ENABLED=true
MAX_CONTRACT_SIZE=65536
CONTRACT_EXECUTION_TIMEOUT=5000
SOLIDITY_ENABLED=true

# ================================
# SECURITY SETTINGS
# ================================

# API Security
API_SECRET_KEY=your_very_secure_secret_key_change_this
JWT_SECRET=your_jwt_secret_key_change_this
API_RATE_LIMIT=1000

# Wallet Security
WALLET_ENCRYPTION=true
PRIVATE_KEY_ENCRYPTION=true

# Network Security
ENABLE_TLS=false
TLS_CERT_PATH=
TLS_KEY_PATH=

# ================================
# AFRICAN FINANCIAL FEATURES
# ================================

# Mobile Integration
SMS_GATEWAY_ENABLED=false
SMS_PROVIDER=twilio
SMS_ACCOUNT_SID=your_twilio_account_sid
SMS_AUTH_TOKEN=your_twilio_auth_token
SMS_PHONE_NUMBER=+1234567890

# USSD Gateway
USSD_ENABLED=false
USSD_SHORTCODE=*123#
USSD_PROVIDER=africa_talking

# Local Currency Support
FIAT_CURRENCY_SUPPORT=true
SUPPORTED_CURRENCIES=NGN,KES,ZAR,GHS,EGP,USD
DEFAULT_CURRENCY=USD

# Regulatory Compliance
KYC_ENABLED=true
AML_MONITORING=true
TRANSACTION_LIMITS_ENABLED=true
DAILY_LIMIT=10000
MONTHLY_LIMIT=100000
KYC_THRESHOLD=1000

# ================================
# MONITORING & LOGGING
# ================================

# Logging
LOG_LEVEL=INFO
LOG_FORMAT=json
LOG_TO_FILE=true
LOG_ROTATION=daily
LOG_RETENTION_DAYS=30

# Metrics & Monitoring
PROMETHEUS_ENABLED=false
PROMETHEUS_PORT=9090
METRICS_ENABLED=true

# Health Checks
HEALTH_CHECK_ENABLED=true
HEALTH_CHECK_INTERVAL=30

# ================================
# DEPLOYMENT SETTINGS
# ================================

# Environment
ENVIRONMENT=development
DEBUG=true
TESTING=false

# External Services
BLOCKCHAIN_EXPLORER_URL=http://localhost:3000
API_BASE_URL=http://localhost:5000
WEBSOCKET_URL=ws://localhost:5000/ws

# Backup & Recovery
AUTO_BACKUP=true
BACKUP_INTERVAL=3600
BACKUP_RETENTION_DAYS=7
BACKUP_STORAGE_PATH=backups/

# ================================
# RENDER.COM DEPLOYMENT
# ================================

# Render Configuration (for testnet)
RENDER_SERVICE_NAME=Dinari-testnet
RENDER_REGION=oregon
RENDER_PLAN=starter

# Database (Render PostgreSQL)
RENDER_DATABASE_URL=${DATABASE_URL}

# External URL (set by Render)
RENDER_EXTERNAL_URL=https://Dinari-testnet.onrender.com

# ================================
# ORACLE CLOUD DEPLOYMENT
# ================================

# Oracle Cloud Configuration (for mainnet)
OCI_TENANCY_ID=your_tenancy_id
OCI_USER_ID=your_user_id
OCI_FINGERPRINT=your_key_fingerprint
OCI_PRIVATE_KEY_PATH=~/.oci/private_key.pem
OCI_REGION=us-ashburn-1

# Load Balancer
OCI_LOAD_BALANCER_IP=
OCI_SSL_CERTIFICATE_ID=

# ================================
# DEVELOPMENT SETTINGS
# ================================

# Development Mode
DEV_MODE=true
AUTO_RELOAD=true
HOT_RELOAD=true

# Testing
RUN_TESTS_ON_START=false
TEST_DATABASE_URL=postgresql://Dinari:test_password@localhost:5432/Dinari_test

# Debugging
ENABLE_DEBUGGER=false
PROFILING_ENABLED=false

# ================================
# THIRD-PARTY INTEGRATIONS
# ================================

# Price Oracles
CHAINLINK_API_KEY=your_chainlink_api_key
COINGECKO_API_KEY=your_coingecko_api_key

# Payment Gateways
FLUTTERWAVE_PUBLIC_KEY=your_flutterwave_public_key
FLUTTERWAVE_SECRET_KEY=your_flutterwave_secret_key
PAYSTACK_PUBLIC_KEY=your_paystack_public_key
PAYSTACK_SECRET_KEY=your_paystack_secret_key

# Banking APIs
OPEN_BANKING_API_KEY=your_open_banking_key
SWIFT_API_CREDENTIALS=your_swift_credentials

# Cloud Storage
AWS_ACCESS_KEY_ID=your_aws_access_key
AWS_SECRET_ACCESS_KEY=your_aws_secret_key
AWS_REGION=us-east-1
AWS_S3_BUCKET=Dinari-storage

# ================================
# PERFORMANCE TUNING
# ================================

# Memory & CPU
MAX_MEMORY_USAGE=512MB
CPU_CORES=2
WORKER_PROCESSES=2

# Connection Pools
DB_POOL_SIZE=20
REDIS_POOL_SIZE=10

# Caching
CACHE_TTL=3600
CACHE_MAX_SIZE=1000

# ================================
# NOTIFICATIONS
# ================================

# Email (for alerts)
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USERNAME=your_email@gmail.com
SMTP_PASSWORD=your_email_password
SMTP_USE_TLS=true

# Slack (for alerts)
SLACK_WEBHOOK_URL=https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK

# Discord (for community)
DISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/YOUR/DISCORD/WEBHOOK

# ================================
# FEATURE FLAGS
# ================================

# Experimental Features
SHARDING_ENABLED=false
CROSS_CHAIN_ENABLED=false
GOVERNANCE_ENABLED=false
STAKING_ENABLED=false

# Beta Features
MOBILE_WALLET_BETA=false
DEFI_FEATURES_BETA=false
NFT_SUPPORT_BETA=false

# ================================
# IMPORTANT NOTES
# ================================

# 1. NEVER commit the actual .env file to version control
# 2. Generate strong random passwords for production
# 3. Use environment-specific values for each deployment
# 4. Rotate secrets regularly in production
# 5. Use proper secret management in production (AWS Secrets Manager, etc.)

# Generate secure passwords:
# python -c "import secrets; print(secrets.token_urlsafe(32))"